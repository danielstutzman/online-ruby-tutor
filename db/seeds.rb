require './web-app.rb'
ExerciseGroup.delete_all
Exercise.delete_all

ExerciseGroup.create! id: 1, name: 'Examples'
ExerciseGroup.create! id: 2, name: 'Your own'

Exercise.create! \
  task_id: 'D001',
  task_id_substring: '001',
  exercise_group_id: 1,
  yaml: %q{---
    description: "Adaptation of Philip Guo's hello example"
    starting_code: |
      x = [1, 2, 3]
      y = [4, 5, 6]
      z = y
      y = x
      x = z
      
      x = [1, 2, 3] # a different [1, 2, 3] list!
      y = x
      x.append(4)
      y.append(5)
      z = [1, 2, 3, 4, 5] # a different list!
      x.append(6)
      y.append(7)
      y = "hello"
      
      
      def foo(lst)
          lst.append("hello")
          bar(lst)
      end
      
      def bar(myLst)
          p myLst
      end
      
      foo(x)
      foo(z)
    }

Exercise.create! \
  task_id: 'D002',
  task_id_substring: '002',
  exercise_group_id: 1,
  yaml: %q{---
    description: "From Teaching with Python by John Zelle"
    starting_code: |
      def happy()
          puts("Happy Birthday to you!")
      end
      
      def sing(name)
          happy()
          happy()
          puts("Happy Birthday dear " + name + "!")
          happy()
      end
      
      # main
      sing("Fred")
    }

Exercise.create! \
  task_id: 'D003',
  task_id_substring: '003',
  exercise_group_id: 1,
  yaml: %q{---
    description: "Adapted from Philip Guo's tokenize example"
    starting_code: |
      input = 'John,Doe,1984,4,1,male'
      
      tokens = input.split(',')
      firstName = tokens[0]
      lastName = tokens[1]
      birthdate = [tokens[2].to_i, tokens[3].to_i, tokens[4].to_i]
      isMale = (tokens[5] == 'male')
      
      puts "Hi #{firstName} #{lastName}"
    }

Exercise.create! \
  task_id: 'D004',
  task_id_substring: '004',
  exercise_group_id: 1,
  yaml: %q{---
    description: "Recursive factorial example"
    starting_code: |
      def fact(n)
          if n <= 1
              return 1
          else
              return n * fact(n - 1)
          end
      end
      
      puts fact(6)
    }

Exercise.create! \
  task_id: 'D000',
  task_id_substring: '000',
  exercise_group_id: 2,
  yaml: "---
    description: '1. Type in some Ruby code. 2. Click Save. 3. Click Debug. 4. Click Forward until program finishes. 5. Click Edit to make more changes. 6. Repeat.'
    starting_code: 'x = 42\n\nputs x'"

ExerciseGroup.create! id: 3, name:  'Numbers and variables'
ExerciseGroup.create! id: 4, name:  'String literals'
ExerciseGroup.create! id: 5, name:  '`if` statements'
ExerciseGroup.create! id: 6, name:  'Calling methods'
ExerciseGroup.create! id: 7, name:  '`while` loops'
ExerciseGroup.create! id: 8, name:  '`for` loops'
ExerciseGroup.create! id: 9, name:  'Arrays'
ExerciseGroup.create! id: 10, name: '`String#join`, `String#split`, 2-D arrays, CSV'

Exercise.create! task_id: "D014", task_id_substring: "014", exercise_group_id: 3, yaml: "---\ndescription: ! ' Example of a variable (`x`) being provided with a test case'\n\nstarting_code: \"puts x\"\ncases:\n- given: { x: 4 }\n- given: { x: 5 }"
Exercise.create! task_id: "C015", task_id_substring: "015", exercise_group_id: 3, yaml: "---\ndescription: ! ' Print out 1, 2, and 3 on separate lines'\n\ncases:\n- expected_stdout: \"1\\n2\\n3\""
Exercise.create! task_id: "D018", task_id_substring: "018", exercise_group_id: 3, yaml: "---\ndescription: ! ' Example of arithmetic'\n\nstarting_code: \"puts 17 * 31\""
Exercise.create! task_id: "D016", task_id_substring: "016", exercise_group_id: 3, yaml: "---\ndescription: ! ' Example of assignment'\n\nstarting_code: \"a = 5\\nputs a\""
Exercise.create! task_id: "D017", task_id_substring: "017", exercise_group_id: 3, yaml: "---\ndescription: ! ' Another example of assignment'\n\nstarting_code: \"m = 2\\nb = -5\\nx = 3\\ny = m * x + b\\nputs y\""
Exercise.create! task_id: "D019", task_id_substring: "019", exercise_group_id: 3, yaml: "---\ndescription: ! ' Example of variable name with underscores'\n\nstarting_code: \"price_of_cabbage_in_usd_per_lb = 0.55\\nputs price_of_cabbage_in_usd_per_lb\""
Exercise.create! task_id: "D020", task_id_substring: "020", exercise_group_id: 3, yaml: "---\ndescription: ! ' Example of a variable (`x`) being provided in a test case'\n\nstarting_code: \"puts x\"\ncases:\n- given: { x: 4 }\n- given: { x: 5 }"
Exercise.create! task_id: "D021", task_id_substring: "021", exercise_group_id: 3, yaml: "---\ndescription: ! ' Example of two test cases that expect different output based on the\n  variable `x`'\n\nstarting_code: \"puts x\"\ncases:\n- given: { x: 4 }\n  expected_stdout: \"4\"\n- given: { x: 5 }\n  expected_stdout: \"5\""
Exercise.create! task_id: "C022", task_id_substring: "022", exercise_group_id: 3, yaml: "---\ndescription: ! ' Print out double of whatever number `x` is.'\n\ncases:\n- given: { x: 4 }\n  expected_stdout: \"8\"\n- given: { x: 5 }\n  expected_stdout: \"10\"\n- given: { x: 6 }\n  expected_stdout: \"12\""
Exercise.create! task_id: "C023", task_id_substring: "023", exercise_group_id: 3, yaml: "---\ndescription: ! ' Print out the square of `a` plus the square of `b`.'\n\ncases:\n- given: { a: 3, b: 4 }\n  expected_stdout: \"25\"\n- given: { a: 0, b: 1 }\n  expected_stdout: \"1\"\n- given: { a: 2, b: 3 }\n  expected_stdout: \"13\""
Exercise.create! task_id: "C024", task_id_substring: "024", exercise_group_id: 3, yaml: "---\ndescription: ! ' Print out the value of `b` twice (on separate lines), and ignore\n  `a`.'\n\ncases:\n- given: { a: 3, b: 4 }\n  expected_stdout: \"4\\n4\"\n- given: { a: 0, b: 1 }\n  expected_stdout: \"1\\n1\"\n- given: { a: 2, b: 3 }\n  expected_stdout: \"3\\n3\""
Exercise.create! task_id: "D025", task_id_substring: "025", exercise_group_id: 4, yaml: "---\ndescription: ! ' Example of a string literal being assigned to a variable.'\n\nstarting_code: |\n  name = \"Joe\"\n  puts name"
Exercise.create! task_id: "D026", task_id_substring: "026", exercise_group_id: 4, yaml: "---\ndescription: ! ' Example of string interpolation'\n\nstarting_code: |\n  name = \"Joe\"\n  puts \"My name is \#{name}.\""
Exercise.create! task_id: "C027", task_id_substring: "027", exercise_group_id: 4, yaml: "---\ndescription: ! ' Make the tests pass using string interpolation of the supplied variables\n  `name` and `age`.  You''ll have to look at the expected output field for each test.'\n\ncases:\n- given: { name: \"Jill\", age: 40 }\n  expected_stdout: \"My name is Jill and I am 40 years old.\"\n- given: { name: \"Bill\", age: 10 }\n  expected_stdout: \"My name is Bill and I am 10 years old.\""
Exercise.create! task_id: "C028", task_id_substring: "028", exercise_group_id: 4, yaml: "---\ndescription: ! ' Example of accidentally forgetting to close a string literal, and\n  its unintended consequences. Notice the syntax coloration. Change it so the test\n  passes'\n\nstarting_code: |\n  x = 42\n  puts \"The value of x is:\n  puts x\n  puts \"\n  puts \"Did that work?\"\ncases:\n- expected_stdout: \"The value of x is:\\n42\\n\\nDid that work?\""
Exercise.create! task_id: "D029", task_id_substring: "029", exercise_group_id: 4, yaml: "---\ndescription: ! ' Example of how double-quotes indicate a string literal, not a string,\n  and \#{} interpolates variables. The last two are brain-teasers. Notice the syntax\n  coloration.'\n\nstarting_code: |\n  puts hello\n  puts \"hello\"\n  puts \"I say hello.\"\n  puts \"I say \#{hello}.\"\n  puts \"I say \#{\"hello\"}.\"\n  puts \"I say \#{\"hello \#{hello}\"} hello.\"\ncases:\n- given: { hello: 42 }"
Exercise.create! task_id: "D030", task_id_substring: "030", exercise_group_id: 4, yaml: "---\ndescription: ! ' Example of using backslashes to escape characters inside string literals.'\n\nstarting_code: |\n  puts \"blue\"\n  puts \"He said, \\\"okay.\\\"\"\n  puts \"C:\\\\>\"\n  puts \"first line\\nsecond line\"\n  puts \"2 + 2 is \#{2 + 2}.\"\n  puts \"2 + 2 is \\\#{2 + 2}.\""
Exercise.create! task_id: "C014", task_id_substring: "014", exercise_group_id: 3, yaml: "---\ndescription: ! ' Type in `puts 42` to make this test pass'\n\ncases:\n- expected_stdout: \"42\""
Exercise.create! task_id: "D015", task_id_substring: "015", exercise_group_id: 3, yaml: "---\ndescription: ! ' Example of the Forward and Back buttons'\n\nstarting_code: \"puts 1\\nputs 2\\nputs 3\\n\""
Exercise.create! task_id: "C032", task_id_substring: "032", exercise_group_id: 4, yaml: "---\ndescription: ! ' Draw a rounded square using `puts` statements and string literals\n  to make the test pass.'\n\ncases:\n- expected_stdout: \"/---\\\\\\n|   |\\n\\\\---/\""
Exercise.create! task_id: "C033", task_id_substring: "033", exercise_group_id: 3, yaml: "---\ndescription: ! ' Print out `The total is: `, then the total of variables `a`, `b`,\n  and `c`'\n\ncases:\n- given: { a: 3, b: 4, c: 5 }\n  expected_stdout: The total is 12\n- given: { a: 1, b: 0, c: -1 }\n  expected_stdout: The total is 0"
Exercise.create! task_id: "C034", task_id_substring: "034", exercise_group_id: 4, yaml: "---\ndescription: ! ' Write a program to print out (not run) the following Ruby source\n  code: `puts \"I say \\\"Hello\\\".\"` (Hint: get one more character printing, test it,\n  and repeat)'\n\nstarting_code: \"puts \\\"puts \\\"\"\ncases:\n- expected_stdout: \"puts \\\"I say \\\\\\\"Hello\\\\\\\".\\\"\""
Exercise.create! task_id: "D035", task_id_substring: "035", exercise_group_id: 5, yaml: "---\ndescription: ! ' Example of an `if` statement'\n\nstarting_code: |\n  puts \"Your current speed is \#{speed} mph.\"\n  if speed > 70\n    puts \"Warning: that's over the speed limit of 70 mph.\"\n  end\ncases:\n  - given: { speed: 65 }\n  - given: { speed: 70 }\n  - given: { speed: 75 }"
Exercise.create! task_id: "D036", task_id_substring: "036", exercise_group_id: 5, yaml: "---\ndescription: ! ' Example of `==`, `!=`, `<`, `>`, `<=`, and `>=`'\n\nstarting_code: |\n  if n == 0\n    puts \"zero\"\n  end\n  if n != 0\n    puts \"non-zero\"\n  end\n  if n > 0\n    puts \"positive\"\n  end\n  if n >= 0\n    puts \"non-negative\"\n  end\n  if n < 0\n    puts \"negative\"\n  end\n  if n <= 0\n    puts \"non-positive\"\n  end\ncases:\n- given: { n: 0 }\n- given: { n: 1 }\n- given: { n: -1 }"
Exercise.create! task_id: "C037", task_id_substring: "037", exercise_group_id: 5, yaml: "---\ndescription: ! ' Given a number variable n, print out its absolute value (its positive\n  value; for example, the absolute value of -5 is 5).'\n\ncases:\n- given: { n: 1 }\n  expected_stdout: \"The absolute value of 1 is 1.\"\n- given: { n: 0 }\n  expected_stdout: \"The absolute value of 0 is 0.\"\n- given: { n: -1 }\n  expected_stdout: \"The absolute value of -1 is 1.\""
Exercise.create! task_id: "C038", task_id_substring: "038", exercise_group_id: 5, yaml: "---\ndescription: ! ' Same as the previous challenge, but use `puts` only once in your\n  program.  (Hint: assign to a variable inside the `if` statement, instead of printing\n  directly.)'\n\ncases:\n- given: { n: 1 }\n  expected_stdout: \"The absolute value of 1 is 1.\"\n- given: { n: 0 }\n  expected_stdout: \"The absolute value of 0 is 0.\"\n- given: { n: -1 }\n  expected_stdout: \"The absolute value of -1 is 1.\""
Exercise.create! task_id: "D039", task_id_substring: "039", exercise_group_id: 5, yaml: "---\ndescription: ! ' Example of an `if` statement comparing strings'\n\nstarting_code: |\n  if attempted_password == \"secret\"\n    puts \"Correct password\"\n  end\ncases:\n- given: { attempted_password: \"test\" }\n- given: { attempted_password: \"secret\" }"
Exercise.create! task_id: "C040", task_id_substring: "040", exercise_group_id: 5, yaml: "---\ndescription: ! ' Print out `\"Correct password\"` if the provided `word1` and `word2`\n  variables combined to form the word `\"together\"`.  For example, a `word1` of `\"toget\"`\n  and a `word2` of `\"her\"` are correct.'\n\ncases:\n- given: { word1: \"toget\", word2: \"her\" }\n  expected_stdout: \"Correct password\"\n- given: { word1: \"to\", word2: \"gether\" }\n  expected_stdout: \"Correct password\"\n- given: { word1: \"\", word2: \"together\" }\n  expected_stdout: \"Correct password\"\n- given: { word1: \"blue\", word2: \"jay\" }\n  expected_stdout: \"\"\n- given: { word1: \"to\", word2: \"her\" }\n  expected_stdout: \"\""
Exercise.create! task_id: "D041", task_id_substring: "041", exercise_group_id: 5, yaml: "---\ndescription: ! ' Example of `if` and `else` statement (2-legged `if`)'\n\nstarting_code: |\n  if word == \"secret\"\n    puts \"Correct password\"\n  else\n    puts \"Incorrect password\"\n  end\ncases:\n- given: { word: \"wrong\" }\n- given: { word: \"secret\" }"
Exercise.create! task_id: "C039", task_id_substring: "039", exercise_group_id: 5, yaml: "---\ndescription: ! ' Same as the previous challenge, but don''t use an `else` condition.'\n\ncases:\n- given: { n: 1 }\n  expected_stdout: \"The absolute value of 1 is 1.\"\n- given: { n: 0 }\n  expected_stdout: \"The absolute value of 0 is 0.\"\n- given: { n: -1 }\n  expected_stdout: \"The absolute value of -1 is 1.\""
Exercise.create! task_id: "D042", task_id_substring: "042", exercise_group_id: 5, yaml: "---\ndescription: ! ' Example of a multi-legged `if`'\n\nstarting_code: |\n  if score >= 90\n    grade = \"A\"\n  elsif score >= 80\n    grade = \"B\"\n  elsif score >= 70\n    grade = \"C\"\n  elsif score >= 60\n    grade = \"D\"\n  else\n    grade = \"F\"\n  end\n  puts grade\ncases:\n- given: { score: 100 }\n  expected_stdout: \"A\"\n- given: { score: 95 }\n  expected_stdout: \"A\"\n- given: { score: 90 }\n  expected_stdout: \"A\"\n- given: { score: 85 }\n  expected_stdout: \"B\"\n- given: { score: 80 }\n  expected_stdout: \"B\"\n- given: { score: 75 }\n  expected_stdout: \"C\"\n- given: { score: 70 }\n  expected_stdout: \"C\"\n- given: { score: 65 }\n  expected_stdout: \"D\"\n- given: { score: 60 }\n  expected_stdout: \"D\"\n- given: { score: 55 }\n  expected_stdout: \"F\""
Exercise.create! task_id: "C043", task_id_substring: "043", exercise_group_id: 5, yaml: "---\ndescription: ! ' Given two numbers `x` and `y`, print out the larger one.'\n\ncases:\n- given: { x: 4, y: 5 }\n  expected_stdout: \"5\"\n- given: { x: 2, y: 2 }\n  expected_stdout: \"2\"\n- given: { x: 9, y: 1 }\n  expected_stdout: \"9\""
Exercise.create! task_id: "C044", task_id_substring: "044", exercise_group_id: 5, yaml: "---\ndescription: ! ' Given three numbers `x`, `y`, and `z`, print out the largest one.  Two\n  possible solutions: you could put an `if` statement inside another one, or you could\n  use a variable called `larger_of_x_and_y`.  Try not to use the `&&` operator even\n  if you already know it.'\n\ncases:\n- given: { x: 4, y: 2, z: 3 }\n  expected_stdout: \"4\"\n- given: { x: 4, y: 3, z: 2 }\n  expected_stdout: \"4\"\n- given: { x: 4, y: 3, z: 4 }\n  expected_stdout: \"4\"\n- given: { x: 1, y: 2, z: 2 }\n  expected_stdout: \"2\"\n- given: { x: 1, y: 3, z: 2 }\n  expected_stdout: \"3\"\n- given: { x: 1, y: 2, z: 4 }\n  expected_stdout: \"4\""
Exercise.create! task_id: "C045", task_id_substring: "045", exercise_group_id: 5, yaml: "---\ndescription: ! ' You''re given a variable named `balance`, a variable named `adjustment`,\n  and a variable named `adjustment_type`.  If the adjustment type is credit, add to\n  the balance; if it''s debit, subtract from the balance; otherwise, leave the balance\n  alone.  Print out the new balance.'\n\ncases:\n- given: { balance: 8, adjustment: 1, adjustment_type: \"credit\" }\n  expected_stdout: \"9\"\n- given: { balance: 7, adjustment: 4, adjustment_type: \"credit\" }\n  expected_stdout: \"11\"\n- given: { balance: 4, adjustment: 8, adjustment_type: \"debit\" }\n  expected_stdout: \"-4\"\n- given: { balance: 5, adjustment: 5, adjustment_type: \"debit\" }\n  expected_stdout: \"0\"\n- given: { balance: 4, adjustment: 7, adjustment_type: \"void\" }\n  expected_stdout: \"4\""
Exercise.create! task_id: "C046", task_id_substring: "046", exercise_group_id: 5, yaml: "---\ndescription: ! ' Same as previous challenge but when you print the balance put a plus\n  symbol (`+`) in front of the number if it''s positive.  There will already be a\n  minus symbol (`-`) in front of the number if it''s negative.  Print 0 without a\n  `+` or `-` if it''s zero.'\n\ncases:\n- given: { balance: 8, adjustment: 1, adjustment_type: \"credit\" }\n  expected_stdout: \"+9\"\n- given: { balance: 7, adjustment: 4, adjustment_type: \"credit\" }\n  expected_stdout: \"+11\"\n- given: { balance: 4, adjustment: 8, adjustment_type: \"debit\" }\n  expected_stdout: \"-4\"\n- given: { balance: 5, adjustment: 5, adjustment_type: \"debit\" }\n  expected_stdout: \"0\"\n- given: { balance: 4, adjustment: 7, adjustment_type: \"void\" }\n  expected_stdout: \"+4\""
Exercise.create! task_id: "C048", task_id_substring: "048", exercise_group_id: 5, yaml: "---\ndescription: ! ' If a person buys two items, the second item will be half off.  Print\n  out the total price.  For simplicity, all prices are in dollars without cents.'\n\ncases:\n- given: { item1: 10, item2: 6 }\n  expected_stdout: \"13\"\n- given: { item1: 10, item2: 10 }\n  expected_stdout: \"15\"\n- given: { item1: 10, item2: 12 }\n  expected_stdout: \"16\""
Exercise.create! task_id: "C051", task_id_substring: "051", exercise_group_id: 5, yaml: "---\ndescription: ! ' Write a simple calculator app.  You''ll be given two variables with\n  numbers (`a` and `b`) and a variable named `operation` that has the math operation\n  (`\"plus\"`, `\"minus\"`, or `\"times\"`) to perform on the two numbers.  '\n\ncases:\n- given: { a: 1, b: 1, operation: \"plus\" }\n  expected_stdout: \"2\"\n- given: { a: 1, b: 2, operation: \"plus\" }\n  expected_stdout: \"3\"\n- given: { a: 1, b: 3, operation: \"plus\" }\n  expected_stdout: \"4\"\n- given: { a: 2, b: 2, operation: \"minus\" }\n  expected_stdout: \"0\"\n- given: { a: 3, b: 1, operation: \"minus\" }\n  expected_stdout: \"2\"\n- given: { a: 2, b: 2, operation: \"times\" }\n  expected_stdout: \"4\"\n- given: { a: 2, b: 3, operation: \"times\" }\n  expected_stdout: \"6\""
Exercise.create! task_id: "C052", task_id_substring: "052", exercise_group_id: 5, yaml: "---\ndescription: ! ' Same as the previous challenge, but instead of just printing out\n  the answer, print out the whole equation.  For example, instead of printing just\n  `4`, print `2 + 2 = 4`.'\n\ncases:\n- given: { a: 1, b: 1, operation: \"plus\" }\n  expected_stdout: \"1 + 1 = 2\"\n- given: { a: 1, b: 2, operation: \"plus\" }\n  expected_stdout: \"1 + 2 = 3\"\n- given: { a: 1, b: 3, operation: \"plus\" }\n  expected_stdout: \"1 + 3 = 4\"\n- given: { a: 2, b: 2, operation: \"minus\" }\n  expected_stdout: \"2 - 2 = 0\"\n- given: { a: 3, b: 1, operation: \"minus\" }\n  expected_stdout: \"3 - 1 = 2\"\n- given: { a: 2, b: 2, operation: \"times\" }\n  expected_stdout: \"2 * 2 = 4\"\n- given: { a: 2, b: 3, operation: \"times\" }\n  expected_stdout: \"2 * 3 = 6\""
Exercise.create! task_id: "C050", task_id_substring: "050", exercise_group_id: 5, yaml: "---\ndescription: ! ' Calculate federal income tax, based on the 2012 tax brackets for\n  a filing status of single, but only for the first three tax brackets (income up\n  to $85,650).  Use http://www.taxact.com/tools/tax-bracket-calculator.asp for instructions\n  about the tax brackets.  Included is a call to `.round` so the tax comes out as\n  just dollars without cents.  You''re encouraged to use variables instead of repeating\n  numbers like 8700.'\n\nstarting_code: |\n  if income <= 8700\n    tax = income * 0.10\n  else\n    # Handle this situation\n  end\n  puts \"Tax is $\#{tax.round}\"\ncases:\n  - given: { income: 0 }\n    expected_stdout: \"Tax is $0\"\n  - given: { income: 100 }\n    expected_stdout: \"Tax is $10\"\n  - given: { income: 200 }\n    expected_stdout: \"Tax is $20\"\n  - given: { income: 8000 }\n    expected_stdout: \"Tax is $800\"\n  - given: { income: 8700 }\n    expected_stdout: \"Tax is $870\"\n  - given: { income: 8800 }\n    expected_stdout: \"Tax is $885\"\n  - given: { income: 8900 }\n    expected_stdout: \"Tax is $900\"\n  - given: { income: 35350 }\n    expected_stdout: \"Tax is $4868\"\n  - given: { income: 35450 }\n    expected_stdout: \"Tax is $4893\"\n  - given: { income: 35550 }\n    expected_stdout: \"Tax is $4918\"\n  - given: { income: 85650 }\n    expected_stdout: \"Tax is $17443\""
Exercise.create! task_id: "C049", task_id_substring: "049", exercise_group_id: 5, yaml: "---\ndescription: ! ' Same as the previous example, but now it''s the less expensive item\n  that''s half off, which is not always the second item.'\n\ncases:\n- given: { item1: 10, item2: 6 }\n  expected_stdout: \"13\"\n- given: { item1: 10, item2: 10 }\n  expected_stdout: \"15\"\n- given: { item1: 10, item2: 12 }\n  expected_stdout: \"17\"\n- given: { item1: 12, item2: 20 }\n  expected_stdout: \"26\""
Exercise.create! task_id: "C053", task_id_substring: "053", exercise_group_id: 5, yaml: "---\ndescription: ! ' This is a program that divides two numbers (`a` and `b`).  Fix it\n  so when the second variable (`b`) is zero, it prints out `Can''t divide by zero`\n  instead of `Infinity` as it incorrectly does now.'\n\nstarting_code: \"puts a / b\"\ncases:\n- given: { a: 4.0, b: 2.0 }\n  expected_stdout: \"2.0\"\n- given: { a: 5.0, b: 2.0 }\n  expected_stdout: \"2.5\"\n- given: { a: 3.0, b: 0.5 }\n  expected_stdout: \"6.0\"\n- given: { a: 3.0, b: 0.0 }\n  expected_stdout: \"Can't divide by zero\""
Exercise.create! task_id: "C054", task_id_substring: "054", exercise_group_id: 5, yaml: "---\ndescription: ! ' Given two strings `a` and `b`, print out `same` if they''re the same,\n  and `different` if they''re different.'\n\ncases:\n- given: { a: \"AGCT\", b: \"AGCT\" }\n  expected_stdout: \"same\"\n- given: { a: \"AGCT\", b: \"AGCC\" }\n  expected_stdout: \"different\"\n- given: { a: \"GACT\", b: \"AGCT\" }\n  expected_stdout: \"different\"\n- given: { a: \"GTCT\", b: \"GTCT\" }\n  expected_stdout: \"same\"\n"
Exercise.create! task_id: "C055", task_id_substring: "055", exercise_group_id: 5, yaml: "---\ndescription: ! ' Given two numbers `a` and `b`, print out `both positive` if they''re\n  both positive, `one positive and one negative` if that''s the case, or `both negative`\n  if that''s the case.  Neither `a` and `b` will ever be zero in this example.'\n\ncases:\n- given: { a: 4, b: 1 }\n  expected_stdout: \"both positive\"\n- given: { a: 4, b: -1 }\n  expected_stdout: \"one positive and one negative\"\n- given: { a: -2, b: 3 }\n  expected_stdout: \"one positive and one negative\"\n- given: { a: -1, b: -5 }\n  expected_stdout: \"both negative\""
Exercise.create! task_id: "C056", task_id_substring: "056", exercise_group_id: 5, yaml: "---\ndescription: ! ' A person has a credit card with a limit of $100.  They already have\n  $70 charged to it.  They try to make another charge.  If that charge would take\n  them over their credit limit, assume that the charge fails.  Print out the credit\n  card balance after the charge is attempted.'\n\nstarting_code: |\n  balance = 70\n  limit = 100\n  # Adjust the balance here based on the variable named purchase_amount\n  puts \"The new balance is $\#{balance}.\"\ncases:\n- given: { purchase_amount: 20 }\n  expected_stdout: \"The new balance is $90.\"\n- given: { purchase_amount: 30 }\n  expected_stdout: \"The new balance is $100.\"\n- given: { purchase_amount: 31 }\n  expected_stdout: \"The new balance is $70.\"\n- given: { purchase_amount: 40 }\n  expected_stdout: \"The new balance is $70.\""
Exercise.create! task_id: "D057", task_id_substring: "057", exercise_group_id: 5, yaml: "---\ndescription: ! ' Unless both the the price-per-item and the quantity are positive,\n  the program will complain.'\n\nstarting_code: |\n  if price_per_item > 0 && quantity > 0\n    puts \"Price per item and quantity are okay.\"\n  else\n    puts \"Price per item and quantity must both be positive.\"\n  end\ncases:\n- given: { price_per_item: 4, quantity: 2 }\n- given: { price_per_item: 0, quantity: 2 }\n- given: { price_per_item: 3, quantity: -1 }\n- given: { price_per_item: -3, quantity: 0 }"
Exercise.create! task_id: "D058", task_id_substring: "058", exercise_group_id: 5, yaml: "---\ndescription: ! ' Another way to write the previous code'\n\nstarting_code: |\n  if price_per_item <= 0 || quantity <= 0\n    puts \"Price per item and quantity must both be positive.\"\n  else\n    puts \"Price per item and quantity are okay.\"\n  end\ncases:\n- given: { price_per_item: 4, quantity: 2 }\n- given: { price_per_item: 0, quantity: 2 }\n- given: { price_per_item: 3, quantity: -1 }\n- given: { price_per_item: -3, quantity: 0 }"
Exercise.create! task_id: "C059", task_id_substring: "059", exercise_group_id: 5, yaml: "---\ndescription: ! ' Given three numbers (variables `a`, `b`, and `c`), output them in\n  sorted order, least to greatest.  For simplicity, assume that all three numbers\n  are different.'\n\ncases:\n- given: { a: 1, b: 2, c: 3 }\n  expected_stdout: \"1\\n2\\n3\"\n- given: { a: 2, b: 6, c: 5 }\n  expected_stdout: \"2\\n5\\n6\"\n- given: { a: 3, b: 1, c: 4 }\n  expected_stdout: \"1\\n3\\n4\"\n- given: { a: 4, b: 5, c: 1 }\n  expected_stdout: \"1\\n4\\n5\"\n- given: { a: 7, b: 1, c: 2 }\n  expected_stdout: \"1\\n2\\n7\"\n- given: { a: 6, b: 3, c: 4 }\n  expected_stdout: \"3\\n4\\n6\""
Exercise.create! task_id: "D061", task_id_substring: "061", exercise_group_id: 6, yaml: "---\ndescription: ! ' Here''s how to call methods without any arguments: object + dot +\n  method name.'\n\nstarting_code: |\n  word = \"DaVinci\"\n  uppercase_word = word.upcase\n  lowercase_word = word.downcase\n  length_of_word = word.length\n  reversed_word = word.reverse"
Exercise.create! task_id: "D062", task_id_substring: "062", exercise_group_id: 6, yaml: "---\ndescription: ! ' Q. What happens if we call a method that doesn''t exist?  Like calling\n  `.upcase` on a number?  A. You get a `NoMethodError`.'\n\nstarting_code: |\n  puts 123.upcase"
Exercise.create! task_id: "D063", task_id_substring: "063", exercise_group_id: 6, yaml: "---\ndescription: ! ' Examples of calling a method without arguments on a number:'\n\nstarting_code: |\n  exact_price = 0.99\n  rounded = exact_price.round\n  puts rounded"
Exercise.create! task_id: "C064", task_id_substring: "064", exercise_group_id: 6, yaml: "---\ndescription: ! ' Print out the uppercase letter for whatever lowercase letter is given\n  in the `letter` variable.'\n\ncases:\n- given: { letter: \"d\" }\n  expected_stdout: \"D\"\n- given: { letter: \"v\" }\n  expected_stdout: \"V\"\n- given: { letter: \"c\" }\n  expected_stdout: \"C\""
Exercise.create! task_id: "C066", task_id_substring: "066", exercise_group_id: 6, yaml: "---\ndescription: ! ' Given a `name` and an `operation`, print out `name` uppercase if\n  `operation` is `\"uppercase\"` and lowercase if `operation` is `\"lowercase\"`. '\n\ncases:\n- given: { name: \"Jill\", operation: \"uppercase\" }\n  expected_stdout: \"JILL\"\n- given: { name: \"Jill\", operation: \"lowercase\" }\n  expected_stdout: \"jill\"\n- given: { name: \"Bill\", operation: \"uppercase\" }\n  expected_stdout: \"BILL\"\n- given: { name: \"Bill\", operation: \"lowercase\" }\n  expected_stdout: \"bill\""
Exercise.create! task_id: "C067", task_id_substring: "067", exercise_group_id: 6, yaml: "---\ndescription: ! ' Given a string in the `s` variable, print it both backwards and uppercase.'\n\ncases:\n- given: { s: \"stop\" }\n  expected_stdout: \"POTS\"\n- given: { s: \"bat\" }\n  expected_stdout: \"TAB\""
Exercise.create! task_id: "D068", task_id_substring: "068", exercise_group_id: 6, yaml: "---\ndescription: ! ' Calling a method with one argument: object + dot + method name +\n  paren + argument + paren.  Don''t worry about remembering the `center` and `index`\n  methods.'\n\nstarting_code: |\n  puts \"elephant\".center(20)\n  puts \"snake\".center(20)\n  puts \"elephant\".index(\"e\")\n  puts \"snake\".index(\"e\")"
Exercise.create! task_id: "D071", task_id_substring: "071", exercise_group_id: 6, yaml: "---\ndescription: ! ' Many of the operators that we''ve seen (for example, `+` and `*`)\n  are actually methods that take one argument, and you can write them that way.'\n\nstarting_code: |\n  puts 3 * 4\n  puts 3.*(4)\n  puts 4 * 3\n  puts 4.*(3)\n  puts 4.+(3)\n  puts 4 >= 3\n  puts 4.>=(3)"
Exercise.create! task_id: "D069", task_id_substring: "069", exercise_group_id: 6, yaml: "---\ndescription: ! ' Usually methods have a fixed number of arguments they expect, but\n  sometimes they''re flexible.'\n\nstarting_code: |\n  puts 12.34567.round\n  puts 12.34567.round(0)\n  puts 12.34567.round(1)\n  puts 12.34567.round(2)\n  puts 12.34567.round(3)"
Exercise.create! task_id: "D070", task_id_substring: "070", exercise_group_id: 6, yaml: "---\ndescription: ! ' Calling a method with two arguments: object + dot + method name +\n  paren + argument 1 + comma + argument 2 + paren.  Also an example of the `gsub`\n  (global substitute) method.'\n\nstarting_code: |\n  puts \"hello\".gsub(\"l\", \"y\")\n  puts \"hello\".gsub(\"ll\", \"r\")\n  puts \"hello\".gsub(\"h\", \"j\")\n  puts \"hello\".gsub(\"lo\", \"p!\")\n  puts \"hello\".gsub(\"k\", \"q\")\n  puts \"hello\".gsub(\"l\", \"\")"
Exercise.create! task_id: "D072", task_id_substring: "072", exercise_group_id: 7, yaml: "---\ndescription: ! ' A `while` loop is like an `if` statement except the body will get\n  repeated until the `while` condition is no longer true. '\n\nstarting_code: |\n  i = 1\n  while i <= 5\n    puts i\n    i = i + 1\n  end"
Exercise.create! task_id: "D073", task_id_substring: "073", exercise_group_id: 7, yaml: "---\ndescription: ! ' Two common bugs with `while` loops are when the `while ` condition\n  is never true, or always true.'\n\nstarting_code: |\n  i = 1\n  while i >= 5\n    puts i\n    i = i + 1\n  end\n\n  i = 1\n  while i <= 5\n    puts i\n  end"
Exercise.create! task_id: "D075", task_id_substring: "075", exercise_group_id: 7, yaml: "---\ndescription: ! ' In order to prevent a `while` loop from running forever, the body\n  of the loop has to be related to the loop condition.  Here''s an example where the\n  body and condition aren''t related, so the loop will run forever:'\n\nstarting_code: |\n  i = 0\n  j = 0\n  while i < 10\n    j = j + 1\n  end"
Exercise.create! task_id: "C076", task_id_substring: "076", exercise_group_id: 7, yaml: "---\ndescription: ! ' Write a `while` loop that prints the numbers from 4 to 14, inclusive.'\n\ncases:\n- expected_stdout: \"4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\""
Exercise.create! task_id: "C074", task_id_substring: "074", exercise_group_id: 6, yaml: "---\ndescription: ! ' Print out the `word` variable with all vowels replaced by dashes.'\n\ncases:\n- given: { word: \"eat apples\" }\n  expected_stdout: \"--t -ppl-s\"\n- given: { word: \"RTD\" }\n  expected_stdout: \"RTD\"\n- given: { word: \"NO ONE WON\" }\n  expected_stdout: \"N- -N- W-N\""
Exercise.create! task_id: "C065", task_id_substring: "065", exercise_group_id: 6, yaml: "---\ndescription: ! ' Print out `uppercase` if the variable `word` is uppercase, print\n  out `lowercase` if it''s lowercase, and otherwise print out `mixed case` .  (Hint:\n  a word is uppercase if when you try to make it uppercase, it stays the same as what\n  it was before).'\n\ncases:\n- given: { word: \"ANT\" }\n  expected_stdout: \"uppercase\"\n- given: { word: \"barley\" }\n  expected_stdout: \"lowercase\"\n- given: { word: \"Charlie\" }\n  expected_stdout: \"mixed case\"\n- given: { word: \"dELTA\" }\n  expected_stdout: \"mixed case\"\n- given: { word: \"ELEPHANT\" }\n  expected_stdout: \"uppercase\""
Exercise.create! task_id: "C071", task_id_substring: "071", exercise_group_id: 6, yaml: "---\ndescription: ! ' Print out the number of words in the variable `text`.  (Hint: remove\n  the spaces and count how much shorter the new text is).'\n\ncases:\n- given: { text: \"night turns to day\" }\n  expected_stdout: \"4\"\n- given: { text: \"there\" }\n  expected_stdout: \"1\"\n- given: { text: \"everywhere and nowhere\" }\n  expected_stdout: \"3\""
Exercise.create! task_id: "C077", task_id_substring: "077", exercise_group_id: 7, yaml: "---\ndescription: ! ' Write a `while` loop that prints the numbers from 1 to whatever the\n  variable `n` is, inclusive.'\n\ncases:\n- given: { n: 3 }\n  expected_stdout: \"1\\n2\\n3\"\n- given: { n: 5 }\n  expected_stdout: \"1\\n2\\n3\\n4\\n5\""
Exercise.create! task_id: "C078", task_id_substring: "078", exercise_group_id: 7, yaml: "---\ndescription: ! ' Write a `while` loop that starts at the number in `m` and counts\n  to the number in `n`, inclusive.  Assume `n` is larger than `m`.'\n\ncases:\n- given: { m: 1, n: 5 }\n  expected_stdout: \"1\\n2\\n3\\n4\\n5\"\n- given: { m: 0, n: 2 }\n  expected_stdout: \"0\\n1\\n2\"\n- given: { m: -3, n: 3 }\n  expected_stdout: \"-3\\n-2\\n-1\\n0\\n1\\n2\\n3\""
Exercise.create! task_id: "C079", task_id_substring: "079", exercise_group_id: 7, yaml: "---\ndescription: ! ' Same as the previous one, except count backwards if `n` isn''t larger\n  than `m`.'\n\ncases:\n- given: { m: 1, n: 5 }\n  expected_stdout: \"1\\n2\\n3\\n4\\n5\"\n- given: { m: 0, n: 2 }\n  expected_stdout: \"0\\n1\\n2\"\n- given: { m: -3, n: 3 }\n  expected_stdout: \"-3\\n-2\\n-1\\n0\\n1\\n2\\n3\"\n- given: { m: 5, n: 1 }\n  expected_stdout: \"5\\n4\\n3\\n2\\n1\""
Exercise.create! task_id: "C080", task_id_substring: "080", exercise_group_id: 7, yaml: "---\ndescription: ! ' Given a number in `n`, round down to the nearest multiple of 10.  Use\n  a `while` loop, not the `round` method.  Assume `n` is positive.  (Hint: keep adding\n  10 to a variable until it''s greater than `n`).'\n\ncases:\n- given: { n: 23 }\n  expected_stdout: \"20\"\n- given: { n: 7 }\n  expected_stdout: \"0\"\n- given: { n: 39 }\n  expected_stdout: \"30\"\n- given: { n: 40 }\n  expected_stdout: \"40\"\n- given: { n: 45 }\n  expected_stdout: \"40\""
Exercise.create! task_id: "C090", task_id_substring: "090", exercise_group_id: 7, yaml: "---\ndescription: ! ' Same as the previous one, except round up if `n` ends with a 5, 6,\n  7, 8, or 9.  (Hint: add 5 and then round down.  Consider working this out on paper\n  before writing code to avoid guessing in the dark).'\n\ncases:\n- given: { n: 23 }\n  expected_stdout: \"20\"\n- given: { n: 7 }\n  expected_stdout: \"10\"\n- given: { n: 39 }\n  expected_stdout: \"40\"\n- given: { n: 40 }\n  expected_stdout: \"40\"\n- given: { n: 45 }\n  expected_stdout: \"50\""
Exercise.create! task_id: "C091", task_id_substring: "091", exercise_group_id: 7, yaml: "---\ndescription: ! ' Print out `*` if `n` is 1, `**` if n is 2, `***` if `n` is 3, etc.  Use\n  `puts`, not the `print` command.  (Hint: the body of the loop needs to keep adding\n  a star to the end of a variable.  If `i = i + 1` works for number variables, what''s\n  the equivalent for string variables?).'\n\ncases:\n- given: { n: 1 }\n  expected_stdout: \"*\"\n- given: { n: 2 }\n  expected_stdout: \"**\"\n- given: { n: 3 }\n  expected_stdout: \"***\"\n- given: { n: 10 }\n  expected_stdout: \"**********\""
Exercise.create! task_id: "C092", task_id_substring: "092", exercise_group_id: 7, yaml: "---\ndescription: ! ' Calculate 10 to the power of `n` and print the result.  For example,\n  10 to the power of 1 is 10.  10 to the power of 2 is 100.  10 to the power of 3\n  is 1000.  Use a `while` loop, not the `**` operator.'\n\ncases:\n- given: { n: 1 }\n  expected_stdout: \"10\"\n- given: { n: 2 }\n  expected_stdout: \"100\"\n- given: { n: 3 }\n  expected_stdout: \"1000\"\n- given: { n: 6 }\n  expected_stdout: \"1000000\""
Exercise.create! task_id: "C093", task_id_substring: "093", exercise_group_id: 7, yaml: "---\ndescription: ! ' Same as before, but also handle cases where `n` is zero or negative.  For\n  example, 10 to the power of 0 is 1.  10 to the power of -1 is 0.1.  10 to the power\n  of -2 is 0.01.  10 to the power of -3 is 0.001.  Note: write all numbers with a\n  decimal place (for example, `1.0` not `1`) so that you don''t accidentally use whole\n  number division (for example, `puts 8 / 3` would output `2`).  The test cases will\n  also expect all the answers to have decimal places this time, unlike before.'\n\ncases:\n- given: { n: 1 }\n  expected_stdout: \"10.0\"\n- given: { n: 2 }\n  expected_stdout: \"100.0\"\n- given: { n: 3 }\n  expected_stdout: \"1000.0\"\n- given: { n: 6 }\n  expected_stdout: \"1000000.0\"\n- given: { n: 0 }\n  expected_stdout: \"1.0\"\n- given: { n: -1 }\n  expected_stdout: \"0.1\"\n- given: { n: -2 }\n  expected_stdout: \"0.01\"\n- given: { n: -4 }\n  expected_stdout: \"0.0001\""
Exercise.create! task_id: "C094", task_id_substring: "094", exercise_group_id: 7, yaml: "---\ndescription: ! ' List the numbers 1 through 10 on each line, along with the number''s\n  double.  Use a `while` loop.  For example, the first line will be `1 2`.  The second\n  line will be `2 4`.  The third line will be `3 6`.  Etc.  Use a `while` loop, not\n  one big `puts` statement.'\n\ncases:\n- expected_stdout: |\n    1 2\n    2 4\n    3 6\n    4 8\n    5 10\n    6 12\n    7 14\n    8 16\n    9 18\n    10 20"
Exercise.create! task_id: "C095", task_id_substring: "095", exercise_group_id: 7, yaml: "---\ndescription: ! ' Same as last one, except instead of the double, the second column\n  will hold a running total of the first column.  The output will be: `1 1 | 2 3 |\n  3 6 | 4 10 | 5 15 | 6 21 | 7 28 | 8 36 | 9 45 | 10 55` except on separate lines\n  instead of separated by pipe characters.  Use a `while` loop, not one big `puts`\n  statement.'\n\ncases:\n- expected_stdout: |\n    1 1\n    2 3\n    3 6\n    4 10\n    5 15\n    6 21\n    7 28\n    8 36\n    9 45\n    10 55"
Exercise.create! task_id: "C096", task_id_substring: "096", exercise_group_id: 7, yaml: "---\ndescription: ! ' Print out the `word` variable along with enough stars at the end\n  to make it exactly 9 characters long.  Don''t use the `*` operator even if you know\n  it.  (Hint: call the `length` method on the string to help you find out how many\n  stars you''ll need).'\n\ncases:\n- given: { word: \"cat\" }\n  expected_stdout: \"cat******\"\n- given: { word: \"spider\" }\n  expected_stdout: \"spider***\"\n- given: { word: \"elephant\" }\n  expected_stdout: \"elephant*\""
Exercise.create! task_id: "C097", task_id_substring: "097", exercise_group_id: 7, yaml: "---\ndescription: ! ' Same as last one, except put the stars at the front instead of the\n  end of the word.'\n\ncases:\n- given: { word: \"cat\" }\n  expected_stdout: \"******cat\"\n- given: { word: \"spider\" }\n  expected_stdout: \"***spider\"\n- given: { word: \"elephant\" }\n  expected_stdout: \"*elephant\""
Exercise.create! task_id: "C098", task_id_substring: "098", exercise_group_id: 7, yaml: "---\ndescription: ! ' Same as last one, except you''ll be given numbers in the `n` variable\n  instead of words in the `word` variable.  (Hint: you''ll need to convert the number\n  into a string)'\n\ncases:\n- given: { n: 100 }\n  expected_stdout: \"******100\"\n- given: { n: 613001 }\n  expected_stdout: \"***613001\"\n- given: { n: 12000444 }\n  expected_stdout: \"*12000444\""
Exercise.create! task_id: "C106", task_id_substring: "106", exercise_group_id: 6, yaml: "---\ndescription: ! ' Print the string in variable `s` backwards, regardless whether it''s\n  a string or a number.  (Hint: if it''s a number, you''ll have to convert it to a\n  string first).'\n\ncases:\n- given: { s: \"stop\" }\n  expected_stdout: \"pots\"\n- given: { s: \"now\" }\n  expected_stdout: \"won\"\n- given: { s: 123 }\n  expected_stdout: \"321\"\n- given: { s: 1337 }\n  expected_stdout: \"7331\""
Exercise.create! task_id: "D107", task_id_substring: "107", exercise_group_id: 6, yaml: "---\ndescription: ! ' Many of the operators that we''ve seen (for example, `+` and `*`)\n  are actually methods that take one argument, and you can write them that way.'\n\nstarting_code: |\n  puts 3 * 4\n  puts 3.*(4)\n  puts 4 * 3\n  puts 4.*(3)\n  puts 4.+(3)\n  puts 4 >= 3\n  puts 4.>=(3)"
Exercise.create! task_id: "D134", task_id_substring: "134", exercise_group_id: 8, yaml: "---\ndescription: ! ' How to count to 10'\n\nstarting_code: |\n  for i in 1..10\n    puts i\n  end"
Exercise.create! task_id: "D135", task_id_substring: "135", exercise_group_id: 8, yaml: "---\ndescription: ! ' Comparing a `for` loop to a `while` loop'\n\nstarting_code: |\n  for i in 1..10\n    puts i\n  end\n\n  i = 1\n  while i <= 10\n    puts i\n    i = i + 1\n  end"
Exercise.create! task_id: "D136", task_id_substring: "136", exercise_group_id: 8, yaml: "---\ndescription: ! ' Unlike the while loop, the `for` loop doesn''t use the counter variable\n  to remember how far it is along.  It uses the counter variable only to communicate\n  that value to you.  So you could even reassign to the counter variable without derailing\n  the loop -- that won''t work with a `while` loop!'\n\nstarting_code: |\n  for i in 1..10\n    i = 0\n    puts i\n  end"
Exercise.create! task_id: "D137", task_id_substring: "137", exercise_group_id: 8, yaml: "---\ndescription: ! ' How to count by twos (2, 4, 6...)'\n\nstarting_code: |\n  for i in 1..10\n    puts i * 2\n  end"
Exercise.create! task_id: "D138", task_id_substring: "138", exercise_group_id: 8, yaml: "---\ndescription: ! ' Example of how to count backwards with a `for` loop.'\n\nstarting_code: |\n  for i in 1..10\n    puts 11 - i\n  end"
Exercise.create! task_id: "C139", task_id_substring: "139", exercise_group_id: 8, yaml: "---\ndescription: ! ' Write a program that prints out the numbers 1 through 10, along with\n  a running total.  For example: `1 1, 2 3, 3 6, 4 10, 5 15`, etc. each on a separate\n  line.'\n\ncases:\n- expected_stdout: |\n    1 1\n    2 3\n    3 6\n    4 10\n    5 15\n    6 21\n    7 28\n    8 36\n    9 45\n    10 55"
Exercise.create! task_id: "D141", task_id_substring: "141", exercise_group_id: 9, yaml: "---\ndescription: ! ' examples of array literals '\n\nstarting_code: |\n  a = [1, 2, 3]\n  a = [\"a\", \"bc\", \"def\", \"gh\"]\n  a = [\"a\", 1, [4, \"c\"]]\n  a = []"
Exercise.create! task_id: "D142", task_id_substring: "142", exercise_group_id: 6, yaml: "---\ndescription: ! ' Comparing `p` to `puts`'\n\nstarting_code: |\n  puts 5\n  p 5\n  puts \"line1\n  line2\"\n  p \"line1\n  line2\"\n  puts [1, 2, [3, 4]]\n  p [1, 2, [3, 4]]"
Exercise.create! task_id: "D143", task_id_substring: "143", exercise_group_id: 8, yaml: "---\ndescription: ! ' Demonstration of another `for` loop:'\n\nstarting_code: |\n  animals = [\"cat\", \"dog\", \"monkey\"]\n  for animal in animals\n    puts \"Can we get a \#{animal}?\"\n  end"
Exercise.create! task_id: "D144", task_id_substring: "144", exercise_group_id: 8, yaml: "---\ndescription: ! ' Putting an `if` statement inside a `for` loop to print out only positive\n  numbers:'\n\nstarting_code: |\n  numbers = [5, -1, 3, -6]\n  for number in numbers\n    if number > 0\n      puts number\n    end\n  end"
Exercise.create! task_id: "C145", task_id_substring: "145", exercise_group_id: 8, yaml: "---\ndescription: ! ' Given the `numbers` variable, add them up and print the total.'\n\ncases:\n- given: { numbers: [1, 2, 3] }\n  expected_stdout: \"6\"\n- given: { numbers: [5, 2] }\n  expected_stdout: \"7\"\n- given: { numbers: [9] }\n  expected_stdout: \"9\"\n- given: { numbers: [] }\n  expected_stdout: \"0\""
Exercise.create! task_id: "D149", task_id_substring: "149", exercise_group_id: 8, yaml: "---\ndescription: ! ' Solution 1: increment the counter yourself'\n\nstarting_code: |\n  colors = [\"red\", \"yellow\", \"blue\"]\n  i = 0\n  for color in colors\n    puts \"\#{i}: \#{color}\"\n    i = i + 1\n  end"
Exercise.create! task_id: "D150", task_id_substring: "150", exercise_group_id: 8, yaml: "---\ndescription: ! ' Solution 2: get the array elements yourself'\n\nstarting_code: |\n  colors = [\"red\", \"yellow\", \"blue\"]\n  for i in 0..2\n    color = colors[i]\n    puts \"\#{i}: \#{color}\"\n  end"
Exercise.create! task_id: "C152", task_id_substring: "152", exercise_group_id: 9, yaml: "---\ndescription: ! ' Given an array of strings called `strings`, print only the odd elements\n  (1st, the 3rd, the 5th, etc.).  The 1st means `strings[0]`, the 3rd means `strings[2]`,\n  etc.'\n\ncases:\n- given: { strings: [\"m\", \"o\", \"n\", \"o\", \"p\", \"o\", \"l\", \"y\"] }\n  expected_stdout: \"m\\nn\\np\\nl\"\n- given: { strings: [\"hot\", \"or\", \"cold\"] }\n  expected_stdout: \"hot\\ncold\""
Exercise.create! task_id: "D151", task_id_substring: "151", exercise_group_id: 9, yaml: "---\ndescription: ! ' Getting and setting array elements with the `[]` operator'\n\nstarting_code: |\n  a = [9, 8, 7]\n  puts a[0]\n  puts a[1]\n  puts a[2]\n  a[1] = 10\n  a[0] = [4, 3]"
Exercise.create! task_id: "D155", task_id_substring: "155", exercise_group_id: 9, yaml: "---\ndescription: ! ' You can make arrays longer by assigning outside their current size'\n\nstarting_code: |\n  a = []\n  a[0] = 7\n  a[1] = 7\n  a[2] = 7"
Exercise.create! task_id: "D156", task_id_substring: "156", exercise_group_id: 9, yaml: "---\ndescription: ! ' You can find out the current array''s size by calling `.size`, so\n  there''s a way to have the same line of code consistently add on to the end of an\n  array.'\n\nstarting_code: |\n  a = []\n  a[a.size] = 7\n  a[a.size] = 7\n  a[a.size] = 7"
Exercise.create! task_id: "D157", task_id_substring: "157", exercise_group_id: 9, yaml: "---\ndescription: ! ' There are two other ways to append onto the end of an array; use\n  the one that you remember best.  Also you can \"prepend\" (insert at the beginning).'\n\nstarting_code: |\n  a = []\n  a.push(7)\n  a = a + [7]\n  a = [7] + a"
Exercise.create! task_id: "C159", task_id_substring: "159", exercise_group_id: 9, yaml: "---\ndescription: ! ' Given a `numbers` variable, print the numbers in reverse, all on\n  one line.  For example, if `numbers` is [8, 3, 4], print out `[4, 3, 8]`.  Use `p`\n  to print out the new reversed list.  Don''t use `reverse`.  (Hint: step through\n  the numbers and prepend to a `reversed_list` variable each time).'\n\ncases:\n- given: { numbers: [8, 3, 4] }\n  expected_stdout: \"[4, 3, 8]\"\n- given: { numbers: [1, 2, 2, 2] }\n  expected_stdout: \"[2, 2, 2, 1]\"\n- given: { numbers: [4] }\n  expected_stdout: \"[4]\"\n- given: { numbers: [] }\n  expected_stdout: \"[]\""
Exercise.create! task_id: "C140", task_id_substring: "140", exercise_group_id: 8, yaml: "---\ndescription: ! ' Print the first ten fibonacci numbers, one on each line.  The first\n  two numbers are one and one, and you find out each next number by adding the previous\n  two.  The output will be `1 1 2 3 5 8 13 21 34 55` but write a program to produce\n  those numbers instead of hard-coding them.  (Hint: you don''t need to use the counter\n  variable inside the loop; it''s just for counting the right number of times).'\n\ncases:\n- expected_stdout: \"1\\n1\\n2\\n3\\n5\\n8\\n13\\n21\\n34\\n55\""
Exercise.create! task_id: "C158", task_id_substring: "158", exercise_group_id: 9, yaml: "---\ndescription: ! ' Given a `numbers` variable, print each number on its own line, using\n  the English word instead of the numeral.  For example, if `numbers` is `[1, 3, 4]`,\n  then output the words `one`, `three`, and `four`. Assume all numbers are within\n  zero to nine, inclusive.  Don''t use an `if statement; create an array that you''ll\n  use to look up the word for a particular number.'\n\ncases:\n- given: { numbers: [1, 3, 4] }\n  expected_stdout: \"one\\nthree\\nfour\\n\"\n- given: { numbers: [9, 8, 7, 6] }\n  expected_stdout: \"nine\\neight\\nseven\\nsix\\n\"\n- given: { numbers: [5, 2] }\n  expected_stdout: \"five\\ntwo\\n\"\n- given: { numbers: [] }\n  expected_stdout: \"\""
Exercise.create! task_id: "C146", task_id_substring: "146", exercise_group_id: 8, yaml: "---\ndescription: ! ' Given a `numbers` variable, print out each number on a separate line,\n  right-justified.  (Hint: pad each number with enough spaces to have a length of\n  4).'\n\ncases:\n- given: { numbers: [45, 1001, 7, 27] }\n  expected_stdout: \"  45\\n1001\\n   7\\n  27\"\n- given: { numbers: [0, 10, 100, 1000] }\n  expected_stdout: \"   0\\n  10\\n 100\\n1000\""
Exercise.create! task_id: "C147", task_id_substring: "147", exercise_group_id: 8, yaml: "---\ndescription: ! ' Given a `numbers` variable, print out the largest number.  Assume\n  that `numbers` has at least one element.  Don''t use the `max` or `sort` method.  (Hint:\n  have a variable named `max_so_far` and update it as you go through the loop).'\n\ncases:\n- given: { numbers: [1, 2, 3] }\n  expected_stdout: \"3\"\n- given: { numbers: [4, 3, 2] }\n  expected_stdout: \"4\"\n- given: { numbers: [7] }\n  expected_stdout: \"7\"\n- given: { numbers: [-1, 99, 98] }\n  expected_stdout: \"99\""
Exercise.create! task_id: "C148", task_id_substring: "148", exercise_group_id: 8, yaml: "---\ndescription: ! ' Given a `numbers` variable, print out the second largest number.  Assume\n  that `numbers` has at least two elements and they''re different.  Don''t print out\n  the largest number even if it repeats two or more times.  Don''t use the `max` or\n  `sort` method.  (Hint: have a variable named `max_so_far` and another named `second_largest_so_far`\n  and update both as you go through the loop).'\n\ncases:\n- given: { numbers: [1, 2, 3, 4, 5] }\n  expected_stdout: \"4\"\n- given: { numbers: [5, 4, 3, 2, 1] }\n  expected_stdout: \"4\"\n- given: { numbers: [9, 11] }\n  expected_stdout: \"9\""
Exercise.create! task_id: "C153", task_id_substring: "153", exercise_group_id: 9, yaml: "---\ndescription: ! ' Given a variable named `bits` containing 1s and 0s, find the leftmost\n  position in the array where there are three 1s in a row.  For example, if `bits`\n  is `[0, 0, 0, 0, 1, 1, 1, 0]` then print `4`.  Assume there is always exactly one\n  run of three 1s in a row, and never four 1s in a row.'\n\ncases:\n- given: { bits: [0, 0, 0, 0, 1, 1, 1, 0] }\n  expected_stdout: \"4\"\n- given: { bits: [1, 1, 1, 0, 0] }\n  expected_stdout: \"0\"\n- given: { bits: [1, 1, 1] }\n  expected_stdout: \"0\"\n- given: { bits: [0, 1, 1, 1] }\n  expected_stdout: \"1\"\n- given: { bits: [1, 0, 1, 1, 1, 0] }\n  expected_stdout: \"2\"\n- given: { bits: [0, 1, 1, 0, 1, 1, 1, 0] }\n  expected_stdout: \"4\""
Exercise.create! task_id: "C154", task_id_substring: "154", exercise_group_id: 9, yaml: "---\ndescription: ! ' Given a `numbers` variable, print how many times each number was\n  mentioned.  If a number wasn''t mentioned, don''t print a line for it.  For example,\n  if `numbers` is `[7, 9, 7]`, print out `7 was mentioned 2 time(s).` and `9 was mentioned\n  1 time(s).`  Assume the numbers will always be between 1 and 10, inclusive.  (Hint:\n  create a variable named `times_mentioned` with `times_mentioned[0]` being the number\n  of times that 0 was mentioned, `times_mentioned[1]` being the number of times that\n  1 was mentioned, etc.)'\n\ncases:\n- given: { numbers: [7, 9, 7] }\n  expected_stdout: |\n    7 was mentioned 2 time(s).\n    9 was mentioned 1 time(s).\n- given: { numbers: [1, 2, 3] }\n  expected_stdout: |\n    1 was mentioned 1 time(s).\n    2 was mentioned 1 time(s).\n    3 was mentioned 1 time(s).\n- given: { numbers: [4, 4, 4, 4, 9] }\n  expected_stdout: |\n    4 was mentioned 4 time(s).\n    9 was mentioned 1 time(s).\n- given: { numbers: [] }\n  expected_stdout: \"\"  "
Exercise.create! task_id: "C160", task_id_substring: "160", exercise_group_id: 9, yaml: "---\ndescription: ! ' Given a `numbers` variable, print out the number that is the most\n  frequent (repeated the most number of times).  Assume that two numbers won''t be\n  tied for most frequent.  For example, if `numbers` is `[7, 9, 7]`, print out `7`.  Assume\n  that `numbers` won''t be empty.  Assume the numbers will always be between 1 and\n  10, inclusive.  (Hint: repeat challenge 154, then find the number with max frequency\n  count).'\n\ncases:\n- given: { numbers: [7, 9, 7] }\n  expected_stdout: \"7\"\n- given: { numbers: [1, 2, 3, 3] }\n  expected_stdout: \"3\"\n- given: { numbers: [4, 4, 4, 4, 9] }\n  expected_stdout: \"4\""
Exercise.create! task_id: "C161", task_id_substring: "161", exercise_group_id: 9, yaml: "---\ndescription: ! ' Given a `numbers` variable, sort the list from least to greatest\n  and print it out in one number.  For example, if `numbers` is `[7, 3, 8]`, print\n  out `[3, 7, 8]`.  Use `p` to print out the sorted numbers.  Don''t use the `sort`\n  method.  (Hint: go through `numbers` and choose the smallest number.  Remove it\n  from `numbers`, and add it to a `sorted_numbers` variable.  Repeat until `numbers`\n  is empty.  Another name for this algorithm is \"insertion sort\").  Assume that no\n  number will be repeated more than once (e.g. `numbers` won''t be [9, 7, 7]).'\n\ncases:\n- given: { numbers: [7, 3, 8] }\n  expected_stdout: \"[3, 7, 8]\"\n- given: { numbers: [9, 0, 1, 2] }\n  expected_stdout: \"[0, 1, 2, 9]\"\n- given: { numbers: [4, 8, 9] }\n  expected_stdout: \"[4, 8, 9]\"\n- given: { numbers: [3, 2, 1] }\n  expected_stdout: \"[1, 2, 3]\"\n- given: { numbers: [1] }\n  expected_stdout: \"[1]\"\n- given: { numbers: [] }\n  expected_stdout: \"[]\""
Exercise.create! task_id: "C162", task_id_substring: "162", exercise_group_id: 9, yaml: "---\ndescription: ! ' Same as Challenge 161, except now numbers can be repeated.  (Hint:\n  you''ll need a way to delete a number only once from the `numbers` variable).'\n\ncases:\n- given: { numbers: [7, 3, 8] }\n  expected_stdout: \"[3, 7, 8]\"\n- given: { numbers: [9, 0, 1, 2] }\n  expected_stdout: \"[0, 1, 2, 9]\"\n- given: { numbers: [4, 8, 9] }\n  expected_stdout: \"[4, 8, 9]\"\n- given: { numbers: [3, 2, 1] }\n  expected_stdout: \"[1, 2, 3]\"\n- given: { numbers: [1] }\n  expected_stdout: \"[1]\"\n- given: { numbers: [] }\n  expected_stdout: \"[]\"\n- given: { numbers: [1, 1] }\n  expected_stdout: \"[1, 1]\"\n- given: { numbers: [2, 3, 3] }\n  expected_stdout: \"[2, 3, 3]\"\n- given: { numbers: [4, 2, 4] }\n  expected_stdout: \"[2, 4, 4]\"\n- given: { numbers: [5, 5, 1] }\n  expected_stdout: \"[1, 5, 5]\"\n- given: { numbers: [5, 1, 1] }\n  expected_stdout: \"[1, 1, 5]\""
Exercise.create! task_id: "D165", task_id_substring: "165", exercise_group_id: 10, yaml: "---\ndescription: ! ' Example of `String#split`'\n\nstarting_code: |\n  s = \"one fish, two fish, red fish, blue fish\"\n  split1 = s.split(\", \")\n  split2 = s.split(\",\")\n  split3 = s.split(\" \")\n  split4 = s.split(\"e\")\n  split5 = s.split(\"\")"
Exercise.create! task_id: "C166", task_id_substring: "166", exercise_group_id: 10, yaml: "---\ndescription: ! ' Count number of words in `text` variable using `String#split`'\n\ncases:\n- given: { text: \"night turns to day\" }\n  expected_stdout: \"4\"\n- given: { text: \"there\" }\n  expected_stdout: \"1\"\n- given: { text: \"everywhere and nowhere\" }\n  expected_stdout: \"3\""
Exercise.create! task_id: "D169", task_id_substring: "169", exercise_group_id: 10, yaml: "---\ndescription: ! ' Example of `Array#join`'\n\nstarting_code: |\n  puts [1, 2, 3, 4].join(\",\")\n  puts [1, 2, 3, 4].join(\", \")\n  puts [1, 2, 3, 4].join(\" \")\n  puts [1, 2, 3, 4].join(\"|\")\n  puts [1, 2, 3, 4].join(\"\\n\")\n  puts [1, 2, 3, 4].join(\"\")"
Exercise.create! task_id: "D172", task_id_substring: "172", exercise_group_id: 10, yaml: "---\ndescription: ! ' Join undoes a split, but split doesn''t always undo a join:'\n\nstarting_code: |\n  numbers = [\"250\", \"500\", \"750\", \"1,000\"]\n  p numbers.join(\",\").split(\",\")"
Exercise.create! task_id: "D173", task_id_substring: "173", exercise_group_id: 10, yaml: "---\ndescription: ! ' Example of 2-D matrix'\n\nstarting_code: |\n  grid = [\n    [1, 1, 1, 1],\n    [1, 0, 0, 0],\n    [1, 1, 1, 1],\n    [1, 0, 0, 0],\n    [1, 0, 0, 0],\n  ]\n  grid[4][1] = 1\n  grid[4][2] = 1\n  grid[4][3] = 1\n  for row in grid\n    for value in row\n      if value == 1\n        print \"*\"\n      else\n        print \" \"\n      end\n    end\n    print \"\\n\"\n  end"
Exercise.create! task_id: "C174", task_id_substring: "174", exercise_group_id: 10, yaml: "---\ndescription: ! ' Given the `games` variable, write a program to total up and print\n  the total number of points that the Broncos scored over all the games.  Assume that\n  the Broncos''s points will always be stored in the 5th item of the list.'\n\ncases:\n- given:\n    games: |\n      12/23,Browns,3,Broncos,34\n      12/30,Chiefs,3,Broncos,38\n      01/12,Ravens,38,Broncos,35\n  expected_stdout: \"107\"\n- given:\n    games: |\n      10/28,Saints,14,Broncos,34\n      11/18,Chargers,23,Broncos,30\n  expected_stdout: \"64\""
Exercise.create! task_id: "C175", task_id_substring: "175", exercise_group_id: 10, yaml: "---\ndescription: ! ' Like Challenge 174, except sometimes the Broncos are listed first\n  and sometimes second, so their points will sometimes be the 3rd and sometimes the\n  5th item of the list.'\n\ncases:\n- given:\n    games: |\n      12/23,Browns,12,Broncos,34\n      12/30,Chiefs,3,Broncos,38\n  expected_stdout: \"72\"\n- given:\n    games: |\n      10/28,Saints,14,Broncos,34\n      11/4,Broncos,31,Bengals,23\n      11/11,Broncos,36,Panthers,14\n      11/18,Chargers,23,Broncos,30\n  expected_stdout: \"131\"\n- given:\n    games: |\n      10/28,Saints,14,Broncos,34\n      11/4,Broncos,31,Bengals,23\n      11/11,Broncos,36,Panthers,14\n      11/18,Chargers,23,Broncos,30\n  expected_stdout: \"131\""
Exercise.create! task_id: "C167", task_id_substring: "167", exercise_group_id: 10, yaml: "---\ndescription: ! ' Given a `text` variable containing a list like `\"fish, chips, and\n  vinegar\"`, print out each item of the list on a separate line.  Make sure to remove\n  the `and`.'\n\ncases:\n- given: { text: \"fish, chips, and vinegar\" }\n  expected_stdout: \"fish\\nchips\\nvinegar\\n\"\n- given: { text: \"life, liberty, and the pursuit of happiness\" }\n  expected_stdout: \"life\\nliberty\\nthe pursuit of happiness\\n\"\n- given: { text: \"red, yellow, blue, and green\" }\n  expected_stdout: \"red\\nyellow\\nblue\\ngreen\\n\""
Exercise.create! task_id: "C170", task_id_substring: "170", exercise_group_id: 10, yaml: "---\ndescription: ! ' Given a `numbers` variable with a string of numbers separated by\n  commas, print out `numbers` with all the negative numbers removed, still separated\n  by commas.'\n\ncases:\n- given: { numbers: \"4,2,-1,5,6\" }\n  expected_stdout: \"4,2,5,6\"\n- given: { numbers: \"-1,3,3\" }\n  expected_stdout: \"3,3\"\n- given: { numbers: \"-7,2,-8\" }\n  expected_stdout: \"2\"\n- given: { numbers: \"-7,-8\" }\n  expected_stdout: \"\""
Exercise.create! task_id: "C171", task_id_substring: "171", exercise_group_id: 10, yaml: "---\ndescription: ! ' Given a `numbers1` and `numbers2` variable, create a new list with\n  the total for each column and print it out separated by commas.  For example, given\n  `numbers1 = \"1,2,3\"` and `numbers2 = \"40,50,60\"`, print out `41,52,63`.  Assume\n  `numbers1` and `numbers2` have the same number of elements.'\n\ncases:\n- given: { numbers1: \"1,2,3\", numbers2: \"40,50,60\" }\n  expected_stdout: \"41,52,63\\n\"\n- given: { numbers1: \"1,2,3\", numbers2: \"10,10,10\" }\n  expected_stdout: \"11,12,13\\n\"\n- given: { numbers1: \"5,10\", numbers2: \"10,5\" }\n  expected_stdout: \"15,15\\n\"\n- given: { numbers1: \"45\", numbers2: \"35\" }\n  expected_stdout: \"80\\n\"\n- given: { numbers1: \"1,2,3,4,5,6,7,8,9,10\", numbers2: \"10,9,8,7,6,5,4,3,2,1\" }\n  expected_stdout: \"11,11,11,11,11,11,11,11,11,11\\n\""
Exercise.create! task_id: "C168", task_id_substring: "168", exercise_group_id: 10, yaml: "---\ndescription: ! ' Given a `csv` variable listing expenses in comma-separated format,\n  sum up the total cost.'\n\ncases:\n- given: { csv: \"2013-04-15,coffee,$3\\n2013-04-16,coffee,$3\\n2013-04-17,latte,$4\\n\" }\n  expected_stdout: \"$10\"\n- given: { csv: \"2013-04-15,latte,$4\\n2013-04-21,tea,$2\\n\" }\n  expected_stdout: \"$6\"\n- given: { csv: \"2013-04-15,latte,$4\\n2013-04-21,tea,$2\\n2013-04-22,mocha,$5\\n\" }\n  expected_stdout: \"$11\"\n- given: { csv: \"\" }\n  expected_stdout: \"$0\""


