-
  name: integer literal
  form: numvar = num
  example: seconds_in_hour = 3600
  output: number
  inputs: number
-
  name: float literal
  form: numvar = num
  example: pi = 3.14
  output: number
  inputs: number
-
  name: string literal
  form: strvar = str
  example: "name = \"Bob\""
  output: string
  inputs: string
-
  name: addition
  tags: plus
  form: numvar = num + num
  example: assets = liabilities + equity
  output: number
  inputs: number, number
-
  name: subtraction
  tags: minus
  form: numvar = num - num
  example: equity = assets - liabilities
  output: number
  inputs: number, number
-
  name: multiplication
  tags: multiply, times
  form: numvar = num * num
  example: total = num_lines * price_per_line
  output: number
  inputs: number, number
-
  name: division (no remainder if both integers)
  tags: divide
  form: numvar = num / num
  example: estimate_per_line = total / num_lines
  output: number
  inputs: number, number
-
  name: convert object to string
  tags: interpolation, hash, curly, braces
  form: "strvar = \"#{obj}\""
  example: "age_string = \"#{age}\""
  output: string
  inputs: object
-
  name: add to number variable
  tags: increment, plus
  form: numvar += num
  example: total_charge += line_charge
  output: number
  inputs: number
-
  name: "output object and newline"
  tags: print
  form: puts obj
  example: puts first_name
  output: output
  inputs: object
-
  name: "greater than"
  tags: then, compare
  form: "(if) num > num ..."
  example: "if n > 0\n  puts \"positive\"\nend"
  output: bool
  inputs: num, num
-
  name: "greater than or equal to"
  tags: then, compare
  form: "(if) num >= num ..."
  example: "if n >= 0\n  puts \"non-negative\"\nend"
  output: bool
  inputs: num, num
-
  name: "less than"
  tags: then, compare
  form: "(if) num < num ..."
  example: "if n < 0\n  puts \"negative\"\nend"
  output: bool
  inputs: num, num
-
  name: "less than or equal to"
  tags: then, compare
  form: "(if) num <= num ..."
  example: "if n <= 0\n  puts \"non-positive\"\nend"
  output: bool
  inputs: num, num
-
  name: conditional branching (1 leg)
  tags: then
  form: "if bool\n  statements\nend"
  example: "if n > 0\n  puts \"positive\"\nend"
  output: statements
  inputs: bool, statements
-
  name: conditional branching (2 legs)
  tags: then otherwise
  form: "if bool\n  statements\nelse\n  statements\nend"
  example: "if n > 0\n  puts \"positive\"\nelse\n  puts \"non-positive\"\nend"
  output: statements
  inputs: bool, statements
-
  name: conditional branching (3+ legs)
  tags: then otherwise
  form: "if bool\n  statements\nelsif bool\n  statements\nelse\n  statements\nend"
  example: "if n > 0\n  puts \"positive\"\nelsif n < 0\n  puts \"negative\"\nelse\n  puts \"zero\"\nend"
  output: statements
  inputs: bool, statements
-
  name: equality
  tags: is, equals
  form: "(if) obj == obj ..."
  example: "if n == 0\n  puts \"zero\"\nend"
  output: bool
  inputs: object, object
-
  name: inequality
  tags: is, equals, not
  form: "(if) obj != obj ..."
  example: "if n != 0\n  puts \"non-zero\"\nend"
  output: bool
  inputs: object, object
-
  name: boolean short-circuit AND
  tags: intersection, both, and
  form: "(if) bool && bool ..."
  example: "if speed > 0 && is_red_light\n  puts \"stop\"\nend"
  output: bool
  inputs: bool, bool
-
  name: boolean short-circuit OR
  tags: union, either, or
  form: "(if) bool || bool ..."
  example: "if is_raining || is_snowing\n  puts \"canceled\"\nend"
  output: bool
  inputs: bool, bool
-
  name: while loop
  tags: until
  form: "while bool\n  statements\nend"
  example: "while i <= 10\n  i += 1\nend"
  output: statements
  inputs: bool, statements
-
  name: read keyboard input
  form: "strvar = readline"
  example: "first_name = readline.chomp"
  output: string
  inputs: keyboard
-
  name: remove trailing newline if any
  form: "strvar = str.chomp"
  example: "first_name = readline.chomp"
  output: string
  inputs: string
-
  name: convert to number (integer)
  form: "intvar = str.to_i"
  example: "age = age_string.to_i"
  output: number
  inputs: string
